// Code generated by MockGen. DO NOT EDIT.
// Source: git.blender.org/flamenco/internal/worker (interfaces: CommandListener)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandListener is a mock of CommandListener interface.
type MockCommandListener struct {
	ctrl     *gomock.Controller
	recorder *MockCommandListenerMockRecorder
}

// MockCommandListenerMockRecorder is the mock recorder for MockCommandListener.
type MockCommandListenerMockRecorder struct {
	mock *MockCommandListener
}

// NewMockCommandListener creates a new mock instance.
func NewMockCommandListener(ctrl *gomock.Controller) *MockCommandListener {
	mock := &MockCommandListener{ctrl: ctrl}
	mock.recorder = &MockCommandListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandListener) EXPECT() *MockCommandListenerMockRecorder {
	return m.recorder
}

// LogProduced mocks base method.
func (m *MockCommandListener) LogProduced(arg0 context.Context, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogProduced", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogProduced indicates an expected call of LogProduced.
func (mr *MockCommandListenerMockRecorder) LogProduced(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogProduced", reflect.TypeOf((*MockCommandListener)(nil).LogProduced), varargs...)
}

// OutputProduced mocks base method.
func (m *MockCommandListener) OutputProduced(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputProduced", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputProduced indicates an expected call of OutputProduced.
func (mr *MockCommandListenerMockRecorder) OutputProduced(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputProduced", reflect.TypeOf((*MockCommandListener)(nil).OutputProduced), arg0, arg1, arg2)
}
