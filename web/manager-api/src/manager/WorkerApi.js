/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssignedTask from '../model/AssignedTask';
import Error from '../model/Error';
import RegisteredWorker from '../model/RegisteredWorker';
import SecurityError from '../model/SecurityError';
import TaskUpdate from '../model/TaskUpdate';
import WorkerRegistration from '../model/WorkerRegistration';
import WorkerSignOn from '../model/WorkerSignOn';
import WorkerStateChange from '../model/WorkerStateChange';
import WorkerStateChanged from '../model/WorkerStateChanged';

/**
* Worker service.
* @module manager/WorkerApi
* @version 0.0.0
*/
export default class WorkerApi {

    /**
    * Constructs a new WorkerApi. 
    * @alias module:manager/WorkerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Register a new worker
     * @param {module:model/WorkerRegistration} WorkerRegistration Worker to register
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegisteredWorker} and HTTP response
     */
    registerWorkerWithHttpInfo(WorkerRegistration) {
      let postBody = WorkerRegistration;
      // verify the required parameter 'WorkerRegistration' is set
      if (WorkerRegistration === undefined || WorkerRegistration === null) {
        throw new Error("Missing the required parameter 'WorkerRegistration' when calling registerWorker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisteredWorker;
      return this.apiClient.callApi(
        '/api/worker/register-worker', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register a new worker
     * @param {module:model/WorkerRegistration} WorkerRegistration Worker to register
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegisteredWorker}
     */
    registerWorker(WorkerRegistration) {
      return this.registerWorkerWithHttpInfo(WorkerRegistration)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Obtain a new task to execute
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssignedTask} and HTTP response
     */
    scheduleTaskWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssignedTask;
      return this.apiClient.callApi(
        '/api/worker/task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Obtain a new task to execute
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssignedTask}
     */
    scheduleTask() {
      return this.scheduleTaskWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark the worker as offline
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    signOffWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/worker/sign-off', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mark the worker as offline
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    signOff() {
      return this.signOffWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Authenticate & sign in the worker.
     * @param {module:model/WorkerSignOn} WorkerSignOn Worker metadata
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerStateChange} and HTTP response
     */
    signOnWithHttpInfo(WorkerSignOn) {
      let postBody = WorkerSignOn;
      // verify the required parameter 'WorkerSignOn' is set
      if (WorkerSignOn === undefined || WorkerSignOn === null) {
        throw new Error("Missing the required parameter 'WorkerSignOn' when calling signOn");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkerStateChange;
      return this.apiClient.callApi(
        '/api/worker/sign-on', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Authenticate & sign in the worker.
     * @param {module:model/WorkerSignOn} WorkerSignOn Worker metadata
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerStateChange}
     */
    signOn(WorkerSignOn) {
      return this.signOnWithHttpInfo(WorkerSignOn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the task, typically to indicate progress, completion, or failure.
     * @param {String} task_id 
     * @param {module:model/TaskUpdate} TaskUpdate Task update information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    taskUpdateWithHttpInfo(task_id, TaskUpdate) {
      let postBody = TaskUpdate;
      // verify the required parameter 'task_id' is set
      if (task_id === undefined || task_id === null) {
        throw new Error("Missing the required parameter 'task_id' when calling taskUpdate");
      }
      // verify the required parameter 'TaskUpdate' is set
      if (TaskUpdate === undefined || TaskUpdate === null) {
        throw new Error("Missing the required parameter 'TaskUpdate' when calling taskUpdate");
      }

      let pathParams = {
        'task_id': task_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/worker/task/{task_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the task, typically to indicate progress, completion, or failure.
     * @param {String} task_id 
     * @param {module:model/TaskUpdate} TaskUpdate Task update information
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    taskUpdate(task_id, TaskUpdate) {
      return this.taskUpdateWithHttpInfo(task_id, TaskUpdate)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkerStateChange} and HTTP response
     */
    workerStateWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkerStateChange;
      return this.apiClient.callApi(
        '/api/worker/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkerStateChange}
     */
    workerState() {
      return this.workerStateWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Worker changed state. This could be as acknowledgement of a Manager-requested state change, or in response to worker-local signals.
     * @param {module:model/WorkerStateChanged} WorkerStateChanged New worker state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    workerStateChangedWithHttpInfo(WorkerStateChanged) {
      let postBody = WorkerStateChanged;
      // verify the required parameter 'WorkerStateChanged' is set
      if (WorkerStateChanged === undefined || WorkerStateChanged === null) {
        throw new Error("Missing the required parameter 'WorkerStateChanged' when calling workerStateChanged");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['worker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/worker/state-changed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Worker changed state. This could be as acknowledgement of a Manager-requested state change, or in response to worker-local signals.
     * @param {module:model/WorkerStateChanged} WorkerStateChanged New worker state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    workerStateChanged(WorkerStateChanged) {
      return this.workerStateChangedWithHttpInfo(WorkerStateChanged)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
