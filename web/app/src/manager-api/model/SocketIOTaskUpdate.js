/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskStatus from './TaskStatus';

/**
 * The SocketIOTaskUpdate model module.
 * @module model/SocketIOTaskUpdate
 * @version 0.0.0
 */
class SocketIOTaskUpdate {
    /**
     * Constructs a new <code>SocketIOTaskUpdate</code>.
     * Subset of a Task, sent over SocketIO when a task changes. For new tasks, &#x60;previous_status&#x60; will be excluded. 
     * @alias module:model/SocketIOTaskUpdate
     * @param id {String} UUID of the Task
     * @param jobId {String} 
     * @param name {String} Name of the task
     * @param updated {Date} Timestamp of last update
     * @param status {module:model/TaskStatus} 
     * @param activity {String} 
     */
    constructor(id, jobId, name, updated, status, activity) { 
        
        SocketIOTaskUpdate.initialize(this, id, jobId, name, updated, status, activity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, jobId, name, updated, status, activity) { 
        obj['id'] = id;
        obj['job_id'] = jobId;
        obj['name'] = name;
        obj['updated'] = updated;
        obj['status'] = status;
        obj['activity'] = activity;
    }

    /**
     * Constructs a <code>SocketIOTaskUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SocketIOTaskUpdate} obj Optional instance to populate.
     * @return {module:model/SocketIOTaskUpdate} The populated <code>SocketIOTaskUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SocketIOTaskUpdate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('job_id')) {
                obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TaskStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('previous_status')) {
                obj['previous_status'] = TaskStatus.constructFromObject(data['previous_status']);
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
        }
        return obj;
    }


}

/**
 * UUID of the Task
 * @member {String} id
 */
SocketIOTaskUpdate.prototype['id'] = undefined;

/**
 * @member {String} job_id
 */
SocketIOTaskUpdate.prototype['job_id'] = undefined;

/**
 * Name of the task
 * @member {String} name
 */
SocketIOTaskUpdate.prototype['name'] = undefined;

/**
 * Timestamp of last update
 * @member {Date} updated
 */
SocketIOTaskUpdate.prototype['updated'] = undefined;

/**
 * @member {module:model/TaskStatus} status
 */
SocketIOTaskUpdate.prototype['status'] = undefined;

/**
 * @member {module:model/TaskStatus} previous_status
 */
SocketIOTaskUpdate.prototype['previous_status'] = undefined;

/**
 * @member {String} activity
 */
SocketIOTaskUpdate.prototype['activity'] = undefined;






export default SocketIOTaskUpdate;

