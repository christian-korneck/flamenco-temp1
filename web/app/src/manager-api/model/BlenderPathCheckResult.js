/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlenderPathSource from './BlenderPathSource';

/**
 * The BlenderPathCheckResult model module.
 * @module model/BlenderPathCheckResult
 * @version 0.0.0
 */
class BlenderPathCheckResult {
    /**
     * Constructs a new <code>BlenderPathCheckResult</code>.
     * @alias module:model/BlenderPathCheckResult
     * @param path {String} The path that was found.
     * @param source {module:model/BlenderPathSource} 
     * @param isUsable {Boolean} Whether the path is usable or not.
     * @param cause {String} Description of why this path is (not) usable.
     */
    constructor(path, source, isUsable, cause) { 
        
        BlenderPathCheckResult.initialize(this, path, source, isUsable, cause);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, source, isUsable, cause) { 
        obj['path'] = path;
        obj['source'] = source;
        obj['is_usable'] = isUsable;
        obj['cause'] = cause;
    }

    /**
     * Constructs a <code>BlenderPathCheckResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlenderPathCheckResult} obj Optional instance to populate.
     * @return {module:model/BlenderPathCheckResult} The populated <code>BlenderPathCheckResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlenderPathCheckResult();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = BlenderPathSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('is_usable')) {
                obj['is_usable'] = ApiClient.convertToType(data['is_usable'], 'Boolean');
            }
            if (data.hasOwnProperty('cause')) {
                obj['cause'] = ApiClient.convertToType(data['cause'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The input that was given to find this Blender.
 * @member {String} input
 */
BlenderPathCheckResult.prototype['input'] = undefined;

/**
 * The path that was found.
 * @member {String} path
 */
BlenderPathCheckResult.prototype['path'] = undefined;

/**
 * @member {module:model/BlenderPathSource} source
 */
BlenderPathCheckResult.prototype['source'] = undefined;

/**
 * Whether the path is usable or not.
 * @member {Boolean} is_usable
 */
BlenderPathCheckResult.prototype['is_usable'] = undefined;

/**
 * Description of why this path is (not) usable.
 * @member {String} cause
 */
BlenderPathCheckResult.prototype['cause'] = undefined;






export default BlenderPathCheckResult;

