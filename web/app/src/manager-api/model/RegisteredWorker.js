/**
 * Flamenco manager
 * Render Farm manager API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkerStatus from './WorkerStatus';

/**
 * The RegisteredWorker model module.
 * @module model/RegisteredWorker
 * @version 0.0.0
 */
class RegisteredWorker {
    /**
     * Constructs a new <code>RegisteredWorker</code>.
     * @alias module:model/RegisteredWorker
     * @param uuid {String} 
     * @param nickname {String} 
     * @param address {String} 
     * @param status {module:model/WorkerStatus} 
     * @param platform {String} 
     * @param lastActivity {String} 
     * @param software {String} 
     * @param supportedTaskTypes {Array.<String>} 
     */
    constructor(uuid, nickname, address, status, platform, lastActivity, software, supportedTaskTypes) { 
        
        RegisteredWorker.initialize(this, uuid, nickname, address, status, platform, lastActivity, software, supportedTaskTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, nickname, address, status, platform, lastActivity, software, supportedTaskTypes) { 
        obj['uuid'] = uuid;
        obj['nickname'] = nickname;
        obj['address'] = address;
        obj['status'] = status;
        obj['platform'] = platform;
        obj['last_activity'] = lastActivity;
        obj['software'] = software;
        obj['supported_task_types'] = supportedTaskTypes;
    }

    /**
     * Constructs a <code>RegisteredWorker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisteredWorker} obj Optional instance to populate.
     * @return {module:model/RegisteredWorker} The populated <code>RegisteredWorker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisteredWorker();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = WorkerStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('last_activity')) {
                obj['last_activity'] = ApiClient.convertToType(data['last_activity'], 'String');
            }
            if (data.hasOwnProperty('software')) {
                obj['software'] = ApiClient.convertToType(data['software'], 'String');
            }
            if (data.hasOwnProperty('supported_task_types')) {
                obj['supported_task_types'] = ApiClient.convertToType(data['supported_task_types'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} uuid
 */
RegisteredWorker.prototype['uuid'] = undefined;

/**
 * @member {String} nickname
 */
RegisteredWorker.prototype['nickname'] = undefined;

/**
 * @member {String} address
 */
RegisteredWorker.prototype['address'] = undefined;

/**
 * @member {module:model/WorkerStatus} status
 */
RegisteredWorker.prototype['status'] = undefined;

/**
 * @member {String} platform
 */
RegisteredWorker.prototype['platform'] = undefined;

/**
 * @member {String} last_activity
 */
RegisteredWorker.prototype['last_activity'] = undefined;

/**
 * @member {String} software
 */
RegisteredWorker.prototype['software'] = undefined;

/**
 * @member {Array.<String>} supported_task_types
 */
RegisteredWorker.prototype['supported_task_types'] = undefined;






export default RegisteredWorker;

