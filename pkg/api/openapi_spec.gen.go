// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rt9c//8AAAD//+w6HDYyhAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
