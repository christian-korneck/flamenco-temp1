// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
