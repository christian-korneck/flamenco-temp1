// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r8s3l/8TAAD//35BcIAGcgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
