// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
