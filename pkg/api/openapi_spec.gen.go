// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TtOa39Pr6s3V/wQAAP//F69kymh0AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
