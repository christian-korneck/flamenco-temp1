// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
