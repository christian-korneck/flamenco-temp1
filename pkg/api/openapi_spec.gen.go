// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//zdTo0YPZgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
