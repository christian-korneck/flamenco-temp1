// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
