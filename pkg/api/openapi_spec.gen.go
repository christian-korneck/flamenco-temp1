// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
