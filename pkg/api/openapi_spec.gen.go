// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///G1A7QeJcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
