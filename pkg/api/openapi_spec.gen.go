// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
