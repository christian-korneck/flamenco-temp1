// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oKBTvVkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
