// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/5Zp/2aPNgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
