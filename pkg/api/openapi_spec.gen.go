// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
