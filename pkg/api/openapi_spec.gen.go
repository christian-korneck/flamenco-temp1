// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+98AAAD//7kw6+xfhwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
