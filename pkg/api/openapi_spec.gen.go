// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
